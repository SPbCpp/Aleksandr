//Ссылки
//
//Урок3. Ссылки
//
//Задание 1
//
//Представьте, что собираете данные очевидцев о том, где они видели пропавшего кота.
//Чтобы очертить круг поисков, нужно вычислить максимальное расстояние,
//на которое кот удалился от дома.
//Текущее максимальное расстояние лежит в целочисленной переменной max_distance.
//Каждое новое свидетельство очевидца — это целое число с расстоянием.
//И оно может увеличить max_distance.
//Напишите функцию UpdateIfGreater, принимающую два целочисленныхаргумента : limit и value.
//Если limit окажется больше value, пусть функция запишет в value значение параметра limit.
//Нужно, чтобы изменение параметра value было видно на вызывающей стороне.
//Возвращать и выводить функция ничего не должна.
// 
//Например :
//
//    int max_distance = 26;
//UpdateIfGreater(25, max_distance);
//cout << max_distance << endl;  // выведет 26, так как 25 не больше 26
//UpdateIfGreater(40, max_distance);
//cout << max_distance << endl;  // выведет 40, так как 40 больше 26
// 
//Входные и выходные данные программы
// 
//В этой программе не нужно ничего считывать из cin и выводить в cout.
//Проверяться будет только функция UpdateIfGreater.
// 
//Как будет тестироваться ваш код
// 
//Тренажёр вызовет функцию UpdateIfGreater с различными
//параметрами limit и value и сравнит значение переменной,
//передаваемой в качестве параметра value, с ожидаемым значением.

#include <iostream>

void UpdateIfGreater(int limit, int& value)
{
	if (limit>value)
	{
		value = limit;
	}// код функции
}